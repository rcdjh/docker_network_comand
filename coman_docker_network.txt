O comando ifconfig tem a finalidade de nos mostrar as interfaces de redes criadas dentro do nosso ambiente

root@Jh:/# ifconfig
br-1b9fee7485b3: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.18.0.1  netmask 255.255.0.0  broadcast 172.18.255.255
        ether 02:42:ff:47:9e:7c  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:92:e2:da:80  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

enp1s0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        ether d0:94:66:ca:a4:62  txqueuelen 1000  (Ethernet)
        RX packets 496410  bytes 706514135 (706.5 MB)
        RX errors 0  dropped 14  overruns 0  frame 0
        TX packets 220559  bytes 21104161 (21.1 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Loopback Local)
        RX packets 81092  bytes 8927155 (8.9 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 81092  bytes 8927155 (8.9 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

wlo1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.105  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::1081:4491:a29a:3bc0  prefixlen 64  scopeid 0x20<link>
        ether 5c:cd:5b:d6:8f:35  txqueuelen 1000  (Ethernet)
        RX packets 1154938  bytes 1392095609 (1.3 GB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 350583  bytes 82270057 (82.2 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@Jh:/# 


O comando ifconfig + a interface desejada, sera apresentado todas as informações de cada interface.
Como estamos trabalhando com o Docker, quando realizamos o comando ele nos trouxe todas as interfaces criadas, alem a interface de rede que foi criada pelo Docker no comando descrito (Para cada interface que estiver craida, entenda como funciona os comandos basicos de cada tecnologia) - No caso do docker iremos executar o comando para ver os detalhes da interface docker.

root@Jh:/# docker inspect 1b9fee7485b3
[
    {
        "Name": "my_custon_net",
        "Id": "1b9fee7485b3c42a31b13ee913c65b4c5f951d9b061567f6b151c14bbea5657f",
        "Created": "2022-09-07T21:17:56.992669694-05:00",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.18.0.0/16",
                    "Gateway": "172.18.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {},
        "Options": {},
        "Labels": {}
    }
]
root@Jh:/# 

root@Jh:/# ifconfig docker0
docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        ether 02:42:92:e2:da:80  txqueuelen 0  (Ethernet)
        RX packets 0  bytes 0 (0.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 0  bytes 0 (0.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@Jh:/# 


root@Jh:/# ifconfig enp1s0
enp1s0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        ether d0:94:66:ca:a4:62  txqueuelen 1000  (Ethernet)
        RX packets 496410  bytes 706514135 (706.5 MB)
        RX errors 0  dropped 14  overruns 0  frame 0
        TX packets 220559  bytes 21104161 (21.1 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@Jh:/# 



root@Jh:/# ifconfig lo
lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Loopback Local)
        RX packets 81234  bytes 8954451 (8.9 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 81234  bytes 8954451 (8.9 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@Jh:/# 

root@Jh:/# ifconfig wlo1
wlo1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 192.168.1.105  netmask 255.255.255.0  broadcast 192.168.1.255
        inet6 fe80::1081:4491:a29a:3bc0  prefixlen 64  scopeid 0x20<link>
        ether 5c:cd:5b:d6:8f:35  txqueuelen 1000  (Ethernet)
        RX packets 1171040  bytes 1414027018 (1.4 GB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 351826  bytes 82466865 (82.4 MB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@Jh:/# 


Os comandos acima é uma apresentação clara das interfaces de redes ja existente no seu ambiente.



Comando utilizado para ver as rotas criadas dentro do seu ambiente.

need@Jh:~$ route
Tabela de Roteamento IP do Kernel
Destino         Roteador        MáscaraGen.    Opções Métrica Ref   Uso Iface

default         192.168.1.1     0.0.0.0         UG    600    0        0 wlo1
link-local      0.0.0.0         255.255.0.0     U     1000   0        0 wlo1
172.17.0.0      0.0.0.0         255.255.0.0     U     0      0        0 docker0
172.18.0.0      0.0.0.0         255.255.0.0     U     0      0        0 br-1b9fee7485b3
192.168.1.0     0.0.0.0         255.255.255.0   U     600    0        0 wlo1
need@Jh:~$ route





Realizamos a criação de uma network com o nome my_custon_net
Com o comando "docker network ls" - sera apresentado a relação das redes criadas em seu ambiente

root@Jh:/# docker network ls
NETWORK ID     NAME            DRIVER    SCOPE
f8e909bdefc9   bridge          bridge    local
752e489003a9   host            host      local
1b9fee7485b3   my_custon_net   bridge    local
669974dae22d   none            null      local
root@Jh:/#





Para analisarmos as informações que esta como padrão no endereço de DNS
Para entender melhor sobre o assunto, edite o arquivos e faça os devidos apontamentos dentro do arquivo.

root@Jh:/# cat /etc/resolv.conf 
# This is /run/systemd/resolve/stub-resolv.conf managed by man:systemd-resolved(8).
# Do not edit.
#
# This file might be symlinked as /etc/resolv.conf. If you're looking at
# /etc/resolv.conf and seeing this text, you have followed the symlink.
#
# This is a dynamic resolv.conf file for connecting local clients to the
# internal DNS stub resolver of systemd-resolved. This file lists all
# configured search domains.
#
# Run "resolvectl status" to see details about the uplink DNS servers
# currently in use.
#
# Third party programs should typically not access this file directly, but only
# through the symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a
# different way, replace this symlink by a static file or a different symlink.
#
# See man:systemd-resolved.service(8) for details about the supported modes of
# operation for /etc/resolv.conf.

nameserver 127.0.0.53
options edns0 trust-ad
search .
root@Jh:/# 

